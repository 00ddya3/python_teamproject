
상호평가
대충 네시간만에 뚝딱 할 수 있는거
INFIX 주식, POSTFIX로 변환, 4+5*6 -> 456*+
적분PROGRAM, f(x) -> F(x), 오차범위
했는데까지 팀발표~~ PROJECT계획서 : WHAT&HOW  2-3분 5시까지

계획서 겸 PPT 작성 



낙현 - 문자열매칭 알고리즘 (단어찾기), 다항함수의 정적분
도훈 - 강사님주제+시각화, 유한오토마타~

팀명 : 천지창조
인원분배 : 
WHAT : 숫자야구게임 WITH 랭킹
HOW : 사용자ID, 랭겜, 랜덤숫자 INT형, 랜덤자릿수(4), 입력함수, 비교함수, 체크함수, 
	스코어현황판(클래스), DB 성적 횟수, 랭크는 결과값으로 파싱~
처음 화면에서 게임시작 OR 랭크 확인 OR 종료 선택
게임 종료 화면에서 랭크 등록 여부 선택
우리는 숫자 입력 X, JUST 컴퓨터의 숫자 맞추기

요구사항명세서
발표자료~PPT : 팀명, WHAT, 역할분담, 시나리오(눌렀을 때 어떤 화면이 나올지)
모듈화




1. 랭킹 : DB에서 뭘 어쩌고 저쩌고
사용자
2. 컴퓨터가 랜덤으로 4자리수(UNIQUE) 설정 

// 플레이어클래스, 스코어클래스, DB
DB 안에 랭크테이블 사용자ID + 시작시간 + 끝난 시간 + 시도횟수
플레이어클래스 : 사용자 ID, 시도횟수, 시작시간, 끝난시간
하위클래스로 속성 시간
게임클래스 : 사용자 ID, BALL, STRIKE, 성공실패여부함수 # 게임을 끝내기 위해 기록하는 상태함수!

프로그램실행 >> 초기화면 3가지 경우 선택
게임시작 >> 개인 아이디 입력 >> 야구게임진행 >> 랭크 등록.미등록 결정 >> 초기화면

랭크와 상위랭크를 보여줄 것 + 언제 게임, 얼마나 오래(초 + 카운팅)

목차 하나하나에 뭔가 더 있음~


기존의 야구게임에 PLAYER CLASS, GAME CLASS, DB를 설계해서 랭킹시스템을 추가할 것! 
프로그램을 실행하면 초기화면(종료, 랭크, 시작)이 보일거고~ 종료는 종료~ 랭킹은 상위 10명 노출~
시작을 하게되면 사용자 ID를 입력받아~ 플레이어 클래스의 새로운 인스턴스를 생성
숫자결정함수를 돌려서 컴퓨터가 4자리 숫자를 랜덤하게 설정할 수 있도록!
사용자가 결정한 4자리 숫자를 입력받고
컴퓨터의 숫자와 비교하여 자릿수+숫자가 정확하면 1S, 숫자만 정확하면 1B이 나올 수 있도록 체크함수 설정
4S 즉 다 맞출 때까지 게임을 플레이하고 전부 맞출 때까지 시도횟수를 기록
랭크 등록을 하겠다고 하면 DB에 사용자ID + 시작시간 + 끝난 시간 + 시도횟수 입력 & 랭크 업데이트
종료 후 초기화면으로 리턴



테이블이랑 샘플데이터를 넣어놓겠다~


현우 : 컴퓨터 정답생성 / 4개친거 체크 / 사용자&정답 상호체크
지혜 : 게임클래스 id ball strike situation
낙현 : 시작화면 터미널 & 다음화면으로 넘어가는거
민정 : 플레이어클래스 : id 

--------------------------------------------------------------------------------------------------------------------------------------
어떻게 할지~! 내가 할거는 컴퓨터의 4가지 숫자 설정!
프로젝트 규모 / 자료양


소개소개~

1. player class + time class >> id, attempt(시도횟수), starttime, endtime
init, set_id, get_id, set_attempt, get_attempt, set_starttime, set_endtime

2. time class >> starttime, endtime
init, set_starttime, set_endtime

3. game class >> 사용자 ID, BALL, STRIKE, 성공실패여부함수
set_id, get_id, set_ball, get_ball, set_strike, get_strike, set_성공실패여부함수

4. db >> 사용자ID + 시작시간 + 끝난 시간 + 시도횟수
id, name, start_dt, end_dt, attemps




